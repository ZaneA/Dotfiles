;;
;; Zane Ashbys .emacs
;;

(add-to-list 'load-path "~/.emacs.d")
(add-to-list 'load-path "~/.emacs.d/org-7.4/lisp")
(require 'org-install)

(tool-bar-mode -1)
(scroll-bar-mode 1)

;(load-file "~/.emacs_colortheme")

;(require 'color-theme)
;(color-theme-initialize)
;(color-theme-gtk-ide)
;(color-theme-ld-dark)

;; Misc settings

(setq inhibit-startup-screen t)
(setq mouse-autoselect-window t)
(set-mouse-color "white")

(fset 'yes-or-no-p 'y-or-n-p)

(setq urgent-org-mode-line "N/A")
(setq frame-title-format '((buffer-name "%f" ("%b")) " | " mode-name " | Emacs" urgent-org-mode-line))
(setq-default cursor-in-non-selected-windows nil)
(setq x-stretch-cursor t)
(setq x-select-enable-clipboard t)
(setq default-fill-column 79)
(delete-selection-mode t)
(setq-default truncate-lines t)

(setq require-final-newline t)
(setq auto-save-default nil) ; Get rid of ugly #backup# files
(setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backup")))

(setq vc-follow-symlinks t)

(setq-default c-basic-offset 4)
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)

(setq read-file-name-completion-ignore-case t)

(desktop-save-mode t) ; Save buffers to desktop file
(setq display-time-string-forms
      '((concat " " 12-hours ":" minutes " ")))
(display-time-mode t) ; Show time in modeline

(show-paren-mode t) ; Show matching parens

(setq pop-up-windows nil)

(put 'narrow-to-region 'disabled nil)

(setq scheme-program-name "csi -:c")

(setq compilation-auto-jump-to-first-error t) ;; This still seems to jump to warnings.. will fix later
(setq compilation-skip-threshold 2)

;; Global keybindings

(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "M-\\") 'align-regexp)
(global-set-key (kbd "M-/") 'hippie-expand)

;; Google!

(defun google (query)
  (interactive "sGoogle: ")
  (browse-url (concat "http://google.com/search?q=" query)))

(defun google-im-feeling-lucky (query)
  (interactive "sI'm feeling lucky: ")
  (browse-url (concat "http://google.com/search?btnI&q=" query)))

(defun google-word-at-point ()
  (interactive)
  (google-im-feeling-lucky (current-word)))

(global-set-key (kbd "<f1>") 'google-word-at-point)
(global-set-key (kbd "<f2>") 'google)
(global-set-key (kbd "<f3>") 'google-im-feeling-lucky)

(setq compilation-read-command nil)
(global-set-key (kbd "<f5>") 'smart-compile)

(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (princ (eval (read (current-kill 0)))
         (current-buffer)))

(global-set-key (kbd "C-c C-e") 'eval-and-replace)

(defun insert-xml (form)
  "Insert XML generated by xmlgen"
  (interactive "sxmlgen: ")
  (princ
   (xmlgen (read form))
   (current-buffer)))

(defun insert-markdown (&optional b e)
  "Run markdown on region and replace"
  (interactive "r")
  (shell-command-on-region b e markdown-command (current-buffer) t))

;; ctrl-tab,ctrl-shift-tab to move between buffers
(defun switch-tab-or-window-forward ()
  (interactive)
  (other-buffer 1))

(defun switch-tab-or-window-backward ()
  (interactive)
  (other-buffer -1))

(global-set-key (kbd "<C-tab>") 'switch-tab-or-window-forward)
(add-hook 'org-mode-hook (lambda () (define-key org-mode-map (kbd "<C-tab>") 'switch-tab-or-window-forward)))
(global-set-key (kbd "<C-S-iso-lefttab>") 'switch-tab-or-window-backward)
(global-set-key (kbd "<C-S-tab>") 'switch-tab-or-window-backward)

(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

(global-set-key (kbd "C-c a") 'org-agenda)

(setq mode-line-in-non-selected-windows nil)

; Org-mode settings
(setq org-agenda-files '("~/todo.org")
      org-confirm-shell-link-function nil
      org-confirm-elisp-link-function nil
      org-return-follows-link t
      org-startup-folded 'showall
      ;org-hide-leading-stars 'hidestars
      org-log-into-drawer t
      org-confirm-babel-evaluate nil
      )

(setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "#ff8888" :weight bold))
        ("URGENT" . (:foreground "#ff2222" :weight bold :underline t))
        ("LATER" . (:foreground "#88aaff" :weight bold))
        ("DONE" . (:foreground "#66ee88" :weight bold))
        ))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((scheme . t)
   (sh . t)
   (emacs-lisp . t)))

(setq org-babel-scheme-cmd "csi -quiet -:c")

(appt-activate 1) ; Enable appointment notification

(defun clean-org-heading (heading)
  (replace-regexp-in-string "\\[\\[.*\\]\\[\\\(.*\\\)\\]\\]" "\\1" heading))

(defun update-org ()
  "Update org-mode related stuff, appointments, modeline etc"
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch) ; HACK
  (setq urgent-org-mode-line
        (let ((heading (mapconcat 'identity
                                  (org-map-entries
                                   (lambda ()
                                     (clean-org-heading (nth 4 (org-heading-components))))
                                   "PRIORITY={.}|TIMESTAMP<=\"<+1w>\"|DEADLINE<=\"<+1w>\"|SCHEDULED<=\"<+1w>\"" 'agenda) ", ")))
          (if (not (string= "" heading))
              (concat " | Urgent Tasks: " heading)
            "")))
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt)
  nil)

(run-at-time nil 300 'update-org)

(defmacro sawfish (form)
  `(saw-client-eval (format "%S" ,form)))

(defun my-goto-workspace (name)
  (sawfish `(goto-workspace ,name)))

(defun new-clocked-task (description tag)
  "Create a new clocked task"
  (interactive "sDescription: \nsTag: ")
  (insert (format "** TODO [[elisp:%S][%s]] :%s:"
                  `(progn
                     (org-clock-in)
                     (my-goto-workspace ,tag)) description tag))
  (sawfish `(update-workspaces ',(mapcar (lambda (tag)
                                          (substring-no-properties (car tag)))
                                        (org-global-tags-completion-table)))))

;(org-add-link-type "wm" 'saw-client-eval)

(defun fit-window-to-region ()
  "Fits the current window to the selected region"
  (interactive)
  (if (and transient-mark-mode mark-active)
      (progn
        (narrow-to-region (region-beginning) (region-end))
        (run-at-time 0.1 nil ; No idea why this doesn't work without the timer..
                     (lambda ()
                       (fit-window-to-buffer)
                       (widen))))
    (message "No region selected")))

;; From http://ruslanspivak.com/2007/08/18/htmlize-your-erlang-code-buffer/
(setq htmlize-output-type 'inline-css)
(defun my-htmlize-region (beg end)
  "Htmlize region and put into <pre> tag style that is left in <body> tag
plus add font-size: 8pt"
  (interactive "r")
  (let* ((buffer-faces (htmlize-faces-in-buffer))
         (face-map (htmlize-make-face-map (adjoin 'default buffer-faces)))
         (pre-tag (format
                   "<pre style=\"%s font-size: 8pt\">"
                   (mapconcat #'identity (htmlize-css-specs
                                          (gethash 'default face-map)) " ")))
         (htmlized-reg (htmlize-region-for-paste beg end)))
    (switch-to-buffer-other-window "*htmlized output*")
                                        ; clear buffer
    (kill-region (point-min) (point-max))
                                        ; set mode to have syntax highlighting
    (nxml-mode)
    (save-excursion
      (insert htmlized-reg))
    (while (re-search-forward "<pre>" nil t)
      (replace-match pre-tag nil nil))
    (goto-char (point-min))))

(defun list-files (path)
  (let ((files (directory-files path t)))
    (mapconcat #'identity
     (last files (- (length files) 2)) ; Remove . and ..
     "\n")))

;; Load some libraries

; nXhtml
(load "nxhtml/autostart")
(setq mumamo-chunk-coloring 'submode-colored)
(setq mumamo-background-colors nil)
(setq nxhtml-skip-welcome t)
(setq rng-nxml-auto-validate-flag nil)

(if (eq system-type 'windows-nt)
    (setq todochiku-command ""))

; Uniquify
(setq 
 uniquify-buffer-name-style 'reverse
 uniquify-separator ":")

(setq scss-sass-command "sass")

; And some other modes
(dolist (lib '(vimpulse rainbow-mode lambda-mode lorem-ipsum midnight pastebin xmlgen
               smart-compile uniquify scss-mode sawfish saw-client kpm-list markdown-mode))
  (require lib))

(midnight-delay-set 'midnight-delay "1:00am")

(vimpulse-define-text-object vimpulse-sexp (arg)
  "Select a S-expression."
  :keys '("ae" "ie")
  (vimpulse-inner-object-range
   arg
   'backward-sexp
   'forward-sexp))

(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
 (filename (buffer-file-name)))
    (if (not filename)
 (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
   (message "A buffer named '%s' already exists!" new-name)
 (progn
   (rename-file name new-name 1)
   (rename-buffer new-name)
   (set-visited-file-name new-name)
   (set-buffer-modified-p nil))))))

(defun my-after-change-major-mode-hook ()
  "Apply my minor modes and custom font locks"
  (rainbow-mode 1)
  (lambda-mode 1))

; Apply my minor modes and custom font locks after a mode change
(add-hook 'after-change-major-mode-hook 'my-after-change-major-mode-hook)

(defun my-emacs-lisp-mode-hook ()
  "Apply my Emacs Lisp Mode stuff"
  (eldoc-mode 1))

(add-hook 'emacs-lisp-mode-hook 'my-emacs-lisp-mode-hook)
(add-hook 'ielm-mode-hook 'my-emacs-lisp-mode-hook)

(defun my-variable-pitch-mode ()
  "Apply variable pitch stuff"
  ;(text-scale-increase 2)
  (variable-pitch-mode t)
  (visual-line-mode t)
  (setq truncate-lines nil))

(add-hook 'mail-mode-hook 'my-variable-pitch-mode)
(add-hook 'text-mode-hook 'my-variable-pitch-mode)
(add-hook 'Info-mode-hook 'my-variable-pitch-mode)

(defun my-php-mode-hook ()
  (c-set-offset 'case-label '+)
  (c-set-offset 'arglist-intro '+) ; for FAPI arrays and DBTNG
  (c-set-offset 'arglist-cont-nonempty 'c-lineup-math) ; for DBTNG fields and values
  (c-set-offset 'arglist-close 'c-lineup-close-paren)
)

(add-hook 'php-mode-hook 'my-php-mode-hook)


(defun my-scheme-mode-hook ()
  "Apply scheme mode stuff"
  (define-key scheme-mode-map [f1]
    '(lambda ()
       (interactive)
       (ignore-errors
         (let ((symbol (thing-at-point 'symbol)))
           (info "(r5rs)")
           (Info-index symbol))))))

(add-hook 'scheme-mode-hook 'my-scheme-mode-hook)

(defun my-nxhtml-mode-hook ()
  "Apply nxhtml mode stuff"
  (local-set-key (kbd "C-c C-c")
    'insert-xml))

(add-hook 'nxhtml-mode-hook 'my-nxhtml-mode-hook)

(defun my-sawfish-mode-hook ()
  "Apply Sawfish mode stuff"
  (define-key sawfish-mode-map [f1]
    '(lambda ()
       (interactive)
       (browse-url "http://sawmill.sourceforge.net/prog-manual.html")))
  (define-key sawfish-mode-map (kbd "M-/") 'sawfish-complete-symbol))

(add-hook 'sawfish-mode-hook 'my-sawfish-mode-hook)

(defun my-compilation-hook (buffer string)
  "Compilation Hook"
  (fit-window-to-buffer (get-buffer-window buffer t)))

(add-hook 'compilation-finish-functions 'my-compilation-hook)

; comptroll.el
(defun compilation-troll (buffer msg)
  (unless (string-match "^finished" msg)
    (insert-image (create-image "~/.emacs.d/troll.png"))
    (insert "\n")))

(add-to-list 'compilation-finish-functions 'compilation-troll)

(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;(require 'php-doc nil t)
;(setq php-doc-directory "~/Documents/php-chunked-xhtml/")
;(add-hook 'php-mode-hook
;          (lambda ()
;            (local-set-key "\t" 'php-doc-complete-function)
;            (local-set-key (kbd "\C-c h") 'php-doc)
;            (set (make-local-variable 'eldoc-documentation-function)
;                 'php-doc-eldoc-function)
;            (eldoc-mode 1)))


;(load (expand-file-name "~/quicklisp/slime-helper.el"))
;(setq inferior-lisp-program "sbcl --noinform --no-linedit")
;(require 'slime)
;(slime-setup '(slime-fancy))

;; Custom set variables
(setq custom-file "~/.emacs-custom-new.el")
(load custom-file)

;; Start Emacs Server
(server-start)
