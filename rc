;; -*- mode: Sawfish -*-

;; Require stuff

(require 'sawfish.wm.commands.jump-or-exec)
(require 'sawfish.wm.util.selection)
(require 'sawfish.wm.util.window-order)
(require 'sawfish.wm.ext.match-window)
(require 'prompt)
(require 'prompt-menu)
(require 'emacs)
(require 'undo)
(require 'focus-by-direction)

;; Settings

; Optional Features to load
(setq *use-features* '(music opacity org))
(setq *music-player* 'musicd) ; musicd, mpd or xmms2

(setq *workspace-count* 4) ; Amount of unnamed workspaces to create

(setq help-display-info-function emacs-call-info)

(defmacro append! (list1 list2)
  `(setq ,list1 (append ,list1 ,list2)))

(define (update-workspaces)
  "Create Workspaces (including org-mode tags)"
  (setq workspace-names '())
  (do ((i 1 (1+ i)))
      ((< *workspace-count* i) i)
    (append! workspace-names (list (number->string i))))
  (append! workspace-names (emacs-eval "(my-org-get-tags)" 'parse)))

(define-command 'update-workspaces update-workspaces)

(update-workspaces)

;; Window Matchers
(add-window-matcher 'WM_CLASS "MPlayer" '(depth . 2) '(sticky . t))

;; Keymaps

(defvar irc-keymap (make-keymap) "Keymap for IRC")

(bind-keys
 irc-keymap

 "M-i" '(jump-or-exec-or-last "screen -x" "urxvt -e sh -c 'ssh hashbox@10.1.1.9'")
 "M-p" '(irc (x-get-selection 'PRIMARY))
 "M-s" '(irc (prompt #:title "IRC:"))
 )

(do ((i 1 (1+ i)))
    ((< 9 i) i)
  (bind-keys
   irc-keymap
   (concat "M-" (number->string i))
   `(synthesize-event (concat "M-" (number->string ,i)) (get-window-by-name-re "screen -x"))))

(bind-keys
 global-keymap

 ; Keymaps
 "M-i"                 irc-keymap

 "M-tab"               '(display-window (prompt-for-window))

 "M-c"                 'delete-window
 "M-b"                 '(prompt-menu (emacs-buffers-menu) "Emacs Buffer:")
 "M-f"                 '(emacs-edit (prompt-for-file "Emacs Edit:"))
 "M-o"                 '(system (format nil "xdg-open %s &" (prompt-for-file "Open:")))
 "M-r"                 '(rename-workspace current-workspace (prompt #:title "Workspace Name:"))

 "M-w"                 '(jump-or-exec-or-last "Vimperator" "firefox")
 "M-e"                 '(jump-or-exec-or-last "Urgent Tasks" "emacs")

 "M-Ret"               '(system (concat (prompt #:title "Run:") " &"))
 "M-`"                 '(call-command (prompt-for-command "Sawfish Command:"))

 "M-u"                 'undo
 "M--"                 'undo

 "M-Left"              'focus-west
 "M-Right"             'focus-east
 "M-Up"                'focus-north
 "M-Down"              'focus-south

 "M-n"                 '(system "firefox &")
 "M-m"                 '(emacs-run "(make-frame)")

 "M-Space"             '(system "urxvt &")

 "Super-l"             '(system "i3lock -p default -c 000000")

 "M-="                 'maximize-fill-window-toggle

 "Super-Button4-Click" 'next-workspace
 "Super-Button5-Click" 'previous-workspace
 )

(do ((i 1 (1+ i)))
    ((< (length workspace-names) i) i)
  (bind-keys
   global-keymap
   (concat "Super-" (number->string i))
   `(activate-workspace ,i)))


(bind-keys
 root-window-keymap

 "Button3-Click" 'popup-root-menu
 "Button4-Click" 'next-workspace
 "Button5-Click" 'previous-workspace
 )

(bind-keys
 window-keymap

 "M-Button3-Move" 'resize-window-interactively
 )

;; Custom functions

(define (jump-or-exec-or-last re exec)
  "Jump-or-exec, unless the window is already focused, in which case focus last window"
  (if (string-match re (window-name (input-focus)))
      (display-window (nth 1 (window-order)))
    (jump-or-exec re exec)))

(define (resize-current-window w h)
  "Resize the current window"
  (resize-window-with-hints* (input-focus) w h))

(define (rename-workspace n name)
  "Rename the Nth workspace to NAME"
  (setq workspace-names
        (let ((i -1))
          (mapcar #'(lambda (item)
                      (if (= n (setq i (1+ i)))
                          name
                        item)) workspace-names))))

(define (send-string-to-window s w)
  (let ((i 0))
    (while (< i (length s))
           (let* ((ch (substring s i (setq i (1+ i))))
                  (e (cond ((equal ch "\n") "RET")
                           (t ch))))
             (synthesize-event e w)))))

(define (irc s)
  (send-string-to-window (concat s "\n") (get-window-by-name-re "screen -x")))

; http://www.mail-archive.com/sawfish-list@gnome.org/msg04711.html
(define (remove-duplicates input)
  "Remove duplicate entries from `input'"
  (do ((a '() (if (member (car input) a) a (cons (car input) a)))
       (input input (cdr input)))
      ((null input) (reverse a))))

;; Optional Features

;; Focus Transparency
(when (member 'opacity *use-features*)
  (require 'native-focus-transparency)
  (setq *out-of-focus-trans* 0xE0000000))

;; Org-mode Workspace Hook (http://demonastery.org/45/)
(when (member 'org *use-features*)
  (define (my-enter-workspace-hook)
    (emacs-eval (format nil "(my-clock-in-on-workspace-change %S)" (nth current-workspace workspace-names))))

  (add-hook 'enter-workspace-hook my-enter-workspace-hook))

;; Music Control
(when (member 'music *use-features*)
  (setq *music-list*
        (if (= *music-player* 'musicd)
            (sort (remove-duplicates
                   (append
                    (directory-files "/media/media/Music")
                    (directory-files "/media/media/Movies")
                    (directory-files "/media/media/TV Shows"))))
          (let ((output (make-string-output-stream)))
            (cond
             ((= *music-player* 'xmms2)
              (call-process (make-process output) nil "sqlite3" (concat (getenv "XDG_CONFIG_HOME") "/xmms2/medialib.db")
                            "SELECT DISTINCT value FROM Media WHERE key = \"artist\";"))
             ((= *music-player* 'mpd)
              (call-process (make-process output) nil "mpc" "list" "artist")))
            (sort (remove-duplicates
                   (string-split "\012" (string-downcase
                                         (get-output-stream-string output))))))))

  (define (music query)
    "Select artist for playing in Music player"
    (cond
     ((= *music-player* 'musicd)
      (system (format nil "%s/Documents/bin/play %s &" (user-home-directory) query)))
     ((= *music-player* 'xmms2)
      (if (string-match "[:~]" query)
          (system (format nil "nyxmms2 scap %s &" query))
        (system (format nil "nyxmms2 scap artist:'%s' &" query))))
     ((= *music-player* 'mpd)
      (system (format nil "%s/Documents/bin/artist %S" (user-home-directory) query)))))

  (define (prompt-for-music)
    (let ((query (prompt-from-list *music-list* "Music:" nil t)))
      (when query
        (music query))))

  (bind-keys
   global-keymap

   "Super-Ret" '(prompt-for-music)
   ))


;; Festival
(when (member 'festival *use-features*)
  (require 'festival)
  (festival-open)

  (define (festival-say-with-voice text voice)
    (festival-eval voice)
    (festival-say text)
    (festival-eval '(voice_nitech_us_slt_arctic_hts)))

  (festival-say-workspace-on-change t)

  (bind-keys
   global-keymap

   "Super-Button1-Click" '(festival-say-with-voice (x-get-selection 'PRIMARY) '(voice_nitech_us_rms_arctic_hts))
   "Super-Button3-Click" '(festival-say-with-voice (x-get-selection 'PRIMARY) '(voice_nitech_us_slt_arctic_hts))
   ))

;; Mouse Gestures
(when (member 'mouse-gestures *use-features*)
  (require 'grow-pack)

  (setq *gestures-initial-xy* '(0 . 0))

  (define (start-gesture)
    "Initialize gestures, must be called on mouse-down, before perform-gesture"
    (setq *gestures-initial-xy* (query-pointer)))

  (define (perform-gesture #!key threshold up down left right)
    "Perform a mouse-based gesture"
    (let* ((threshold (or threshold 60))
           (initial-x (car *gestures-initial-xy*))
           (initial-y (cdr *gestures-initial-xy*))
           (new-xy (query-pointer))
           (new-x (car new-xy))
           (new-y (cdr new-xy)))
      (cond
       ((> (- initial-y threshold) new-y)
        (eval (or up    '(grow-window-up (input-focus)))))
       ((> (- initial-x threshold) new-x)
        (eval (or left  '(grow-window-left (input-focus)))))
       ((< (+ initial-y threshold) new-y)
        (eval (or down  '(grow-window-down (input-focus)))))
       ((< (+ initial-x threshold) new-x)
        (eval (or right '(grow-window-right (input-focus))))))))

  (bind-keys
   global-keymap

   "Super-Button2-Click" '(start-gesture)
   "Super-Button2-Off"   '(perform-gesture)
   ))
