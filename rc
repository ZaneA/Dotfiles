;;; -*- mode: Sawfish -*-

;;; Require stuff

(require 'sawfish.wm.commands.jump-or-exec)
(require 'sawfish.wm.util.selection)
(require 'sawfish.wm.util.window-order)
(require 'sawfish.wm.ext.match-window)
(require 'prompt)
(require 'prompt-menu)
(require 'emacs)
(require 'undo)
(require 'home-ws) ; Handy!


;;; Personal Settings

; Optional Features: music org xmobar opacity alt-theme
(setq *use-features* '(music org xmobar alt-theme))

(setq *music-player* 'musicd) ; musicd, mpd or xmms2

(setq *alt-theme-gtk* "Valium-Hash")
(setq *alt-theme-gtk-extra* "/home/zanea/.gtkrc-2.0.mine")
(setq *alt-theme-frame* "gperfection-hash")
;(setq *alt-theme-apps* '(urxvt Pidgin nautilus nitrogen eog emacs)) ; Class names, downcased to test executable names
(setq *alt-theme-apps* '(urxvt nitrogen eog)) ; Class names, downcased to test executable names

(setq help-display-info-function emacs-call-info)


;;; Window Matchers

(add-window-matcher 'WM_CLASS "MPlayer" '(depth . 2) '(sticky . t) '(sticky-viewport . t))
(add-window-matcher 'WM_CLASS "Pidgin" '(depth . 0) '(sticky . t) '(sticky-viewport . t))
(add-window-matcher 'WM_CLASS "xchat" '(depth . 0) '(sticky . t) '(sticky-viewport . t))
(add-window-matcher 'WM_CLASS "Navigator" '(keymap-trans . (("M-w" "C-F4"))))


;;; Menus

(setq root-menu
      `((,(_ "_Windows") . window-menu)
        (,(_ "_Customize") . custom-menu)
        ()
        (,(_ "_Edit Config") (emacs-edit "~/.sawfish/rc"))
        (,(_ "_Restart Sawfish") restart)
        () ; So I don't accidently hit quit
        (,(_ "_Quit") quit)))


;;; Keymaps

(defvar irc-keymap (make-keymap) "Keymap for IRC")

; IRC bindings
(bind-keys
 irc-keymap

 "M-i" '(jump-or-exec-or-last "XChat" "xchat")
 "M-p" '(irc (x-get-selection 'PRIMARY))
 "M-s" '(irc (prompt #:title "IRC:"))
 )

; alt-n to switch irssi windows
(do ((i 1 (1+ i)))
    ((< 9 i) i)
  (bind-keys
   irc-keymap
   (concat "M-" (number->string i))
   `(synthesize-event (concat "M-" (number->string ,i)) (get-window-by-name-re "XChat"))))

; Global bindings
(bind-keys
 global-keymap

 "M-i"                 irc-keymap

 "M-tab"               'cycle-windows

 "M-c"                 'delete-window
 "M-q"                 'delete-window
 "M-b"                 '(prompt-menu (emacs-buffers-menu) "Emacs Buffer:")
 "M-f"                 '(emacs-edit (prompt-for-file "Emacs Edit:"))
 "M-o"                 '(system (format nil "xdg-open %s &" (prompt-for-file "Open:")))
 "M-r"                 '(rename-workspace current-workspace (prompt #:title "Workspace Name:"))

 "Super-w"             '(jump-or-exec-or-last "Vimperator" "firefox")
 "Super-e"             '(jump-or-exec-or-last "Emacs" "emacs -Q --load /home/zanea/.emacs_new")
 ;"Super-e"             '(system "emacs -Q --load /home/zanea/.emacs_new &")
 "Super-p"             '(jump-or-exec-or-last "Buddy List" "pidgin")

 ;"XF86HomePage"        '(system "dbus-launch nautilus &")
 "XF86HomePage"        '(system "nautilus &")
 "XF86Calculator"      '(system "urxvt &")
 "Super-XF86Calculator"      '(system "urxvt -e rlwrap csi &")
 "M-XF86Calculator"      '(system "urxvt -e sawfish-client &")

 "M-Ret"               '(system (concat (prompt #:title "Run:") " &"))
 "M-`"                 '(call-command (prompt-for-command "Sawfish Command:"))

 "M-u"                 'undo
 "M--"                 'undo

 "Super--"                 '(tile-windows)

 "M-n"                 '(system "firefox &")
 "M-m"                 '(emacs-run "(make-frame)")

 "M-Space"             '(system "urxvt &")

 "Super-l"             '(system "i3lock -p default -c 000000")

 "M-="                 'maximize-fill-window-toggle

 "Super-Button4-Click" 'next-workspace
 "Super-Button5-Click" 'previous-workspace

 "C-Left"              'previous-workspace
 "C-Right"             'next-workspace
 )

; Root window bindings
(bind-keys
 root-window-keymap

 "Button3-Click" 'popup-root-menu

 "Button4-Click" '(system "ossmix vmix0-outvol -- +1")
 "Button5-Click" '(system "ossmix vmix0-outvol -- -1")
 )

; Window bindings
(bind-keys
 window-keymap

 "M-Button3-Move" 'resize-window-interactively
 )


;;; Macros

(defmacro emacs (form #!optional type)
  "Macro to allow passing a quoted form to be evaluated in Emacs"
  `(emacs-eval (format nil "%S" ,form) ,type))
  
(defmacro append! (list1 list2)
  "Destructive Append Macro"
  `(setq ,list1 (append ,list1 ,list2)))


;;; Custom functions

(defun y-or-n-p (title)
  "Prompt for Yes or No"
  (string=
   (prompt #:title (concat title " (y or n)"))
   "y"))

(define (jump-or-exec-or-last re exec)
  "Jump-or-exec, unless the window is already focused, in which case focus last window"
  (if (string-match re (window-name (input-focus)))
      (display-window (nth 1 (window-order)))
    (jump-or-exec re exec)))

(define (resize-current-window w h)
  "Resize the current window"
  (resize-window-with-hints* (input-focus) w h))

(define (rename-workspace n name)
  "Rename the Nth workspace to NAME"
  (setq workspace-names
        (let ((i -1))
          (mapcar #'(lambda (item)
                      (if (= n (setq i (1+ i)))
                          name
                        item)) workspace-names))))

(define (send-string-to-window s w)
  "What it says on the tin"
  (let ((i 0))
    (while (< i (length s))
           (let* ((ch (substring s i (setq i (1+ i))))
                  (e (cond ((equal ch "\n") "RET")
                           (t ch))))
             (synthesize-event e w)))))

(define (irc s)
  "Send string to IRC window, pressing enter"
  (send-string-to-window (concat s "\n") (get-window-by-name-re "screen -x")))

; http://www.mail-archive.com/sawfish-list@gnome.org/msg04711.html
(define (remove-duplicates input)
  "Remove duplicate entries from `input'"
  (do ((a '() (if (member (car input) a) a (cons (car input) a)))
       (input input (cdr input)))
      ((null input) (reverse a))))

(define (find-in-list name list)
  "Finds a name in a list and returns its position"
  (let ((i 0))
    (while (and
            (> (length list) i)
            (not (equal (nth i list) name)))
      (setq i (1+ i)))
    i))

; Tile windows 50/50 Windows 7 style
; TODO Set these as "maximized" so unmaximizing returns them to their original size
(define (tile-windows #!optional (a (nth 0 (window-order))) (b (nth 1 (window-order))))
  (let ((w (/ (car (screen-dimensions)) 2))
        (h (cdr (screen-dimensions))))
    (move-resize-window-to a 0 0 w h)
    (move-resize-window-to b w 0 w h)))

;; Numbered Workspaces
(define (update-workspaces #!optional workspaces)
  "Create Workspaces (including org-mode tags)"
  (setq workspace-names '(main))
  (append! workspace-names (or workspaces
                               (emacs
                                '(mapcar (lambda (tag)
                                           (substring-no-properties (car tag)))
                                         (org-global-tags-completion-table)) 'parse))))

(define-command 'update-workspaces update-workspaces)

(update-workspaces)

(define (goto-workspace name)
  "Switches workspace by name"
  (call-command 'activate-workspace (1+ (find-in-list name workspace-names))))

; Viewport switching binds
(do ((i 1 (1+ i)))
    ((< 9 i) i)
  (bind-keys
   global-keymap
   (concat "Super-" (number->string i))
   `(activate-viewport ,i 1)))

(define (get-window-memory-usage w)
  "Get Memory Usage for a Window using _NET_WM_PID"
  (let ((pid (caddr (get-x-property w '_NET_WM_PID)))
        (output (make-string-output-stream)))
    (if pid
        (progn
          (call-process
           (make-process output) nil
           "sh" "-c" (format nil "ps -p %s -o size=" (car (vector->list pid))))
          (string->number (string-replace "\012| " "" (get-output-stream-string output))))
      0)))

(defun human-size (file-size)
  "Return FILE-SIZE as a string in human-readable format using M, G, T."
  (format nil (cond
		((< file-size 1024.0) "%dKB")
		((< (setq file-size (round (/ file-size 1024.0))) 10.0) "%dMB")
		((< file-size 1024.0) "%dMB")
		((< (setq file-size (round (/ file-size 1024.0))) 10.0) "%dGB")
		((< file-size 1024.0) "%dGB")
		((< (setq file-size (round (/ file-size 1024.0))) 10.0) "%dTB")
		(t "%dTB"))
	  file-size))

(define (show-window-memory-usage w)
  "Show Memory Usage for a Window"
  (display-message (format nil "Window %S is using %s"
                           (window-name w) (human-size (get-window-memory-usage w)))))

(define-command 'memory-usage show-window-memory-usage #:spec "%W")


;;; Optional Features

;; Focus Transparency
(when (member 'opacity *use-features*)
  (require 'native-focus-transparency)
  (setq *out-of-focus-trans* 0x40000000))


;; Org-mode Integration (http://demonastery.org/45/)
(when (member 'org *use-features*)
  (define (org-sawfish-clock-in-by-tag tag)
    "Tells org-mode to clock in to a task, by tag name"
    (emacs
     `(progn
        (org-clock-out t)
        (org-map-entries 'org-clock-in ,tag 'agenda))))
  
  ;; Clock prompt
  (define (org-sawfish-clock-prompt)
    "Prompt for a tag to clock in to"
    (let ((query (prompt-from-list (nthcdr *workspace-count* workspace-names) "Clock in to:" nil t)))
      (if query
          (org-sawfish-clock-in-by-tag query)
        (emacs '(org-clock-out t)))))

  ;; Workspace change hook
  (define (org-sawfish-enter-workspace-hook)
    (org-sawfish-clock-in-by-tag (nth current-workspace workspace-names)))

  (add-hook 'enter-workspace-hook org-sawfish-enter-workspace-hook)

  ;; Check for potentially clocked windows and remind user
  (setq *clocked-window-ignore* '("Emacs"))

  (define (is-clocked-window w)
    "Checks if the window looks like it should be clocked"
    (when (filter #'(lambda (x)
                      (not (or
                            (string-match x (window-name w) 0 t)
                            (string-match x (window-class w) 0 t))))
                  *clocked-window-ignore*)
      (let ((tags (nthcdr *workspace-count* workspace-names)))
        (when tags
          (filter #'(lambda (x)
                      (string-match x (window-name w) 0 t))
                  tags)))))

  (define (org-sawfish-focus-change-hook w)
    (let ((tags (is-clocked-window w)))
      (when (and tags (not (member (find-in-list (car tags) workspace-names) (window-workspaces w))))
        (display-message
         (format nil "Looks like you're working on the %S task..\n\nYou can clock this in by pressing Super-` (backtick)"
                 (mapconcat #'identity tags " ")))
        (make-timer (lambda (x) (display-message nil) (delete-timer x)) 5))))

  ;(add-hook 'focus-in-hook org-sawfish-focus-change-hook)
  ;(add-hook 'property-notify-hook org-sawfish-focus-change-hook)

  ;; Function to prompt for tag to clock in to, or guess and move window to workspace
  (define (org-sawfish-start-clock w)
    "Moves current window to clocked workspace if applicable, or ask to clock"
    (let ((tags (is-clocked-window w)))
      (if tags
          (let ((workspace (find-in-list (car tags) workspace-names)))
            (copy-window-to-workspace w (car (window-workspaces w)) workspace)
            (select-workspace workspace))
        (org-sawfish-clock-prompt))))

  (bind-keys global-keymap "Super-`" '(org-sawfish-start-clock (input-focus)))

  (setq root-menu (append `((,(_ "_Org-Mode") . ((,(_ "_Open Day Agenda") (emacs '(org-agenda-goto-today)))
                                                 (,(_ "_Clock in to Tag") (org-sawfish-clock-prompt))))
                            ())
                          root-menu)))


;; Music Control
(when (member 'music *use-features*)
  (setq *music-list*
        (if (= *music-player* 'musicd)
            (sort (remove-duplicates
                   (append
                    (directory-files "/media/media/Music")
                    (directory-files "/media/media/Movies")
                    (directory-files "/media/media/TV Shows"))))
          (let ((output (make-string-output-stream)))
            (cond
             ((= *music-player* 'xmms2)
              (call-process (make-process output) nil "sqlite3" (concat (getenv "XDG_CONFIG_HOME") "/xmms2/medialib.db")
                            "SELECT DISTINCT value FROM Media WHERE key = \"artist\";"))
             ((= *music-player* 'mpd)
              (call-process (make-process output) nil "mpc" "list" "artist")))
            (sort (remove-duplicates
                   (string-split "\012" (string-downcase
                                         (get-output-stream-string output))))))))

  (define (music query)
    "Select artist for playing in Music player"
    (cond
     ((= *music-player* 'musicd)
      (system (format nil "%s/Documents/bin/play %s &" (user-home-directory) query)))
     ((= *music-player* 'xmms2)
      (if (string-match "[:~]" query)
          (system (format nil "nyxmms2 scap %s &" query))
        (system (format nil "nyxmms2 scap artist:'%s' &" query))))
     ((= *music-player* 'mpd)
      (system (format nil "%s/Documents/bin/artist %S" (user-home-directory) query)))))

  (define (prompt-for-music)
    "Prompt for a Music Query to pass to the Active Player"
    (let ((query (prompt-from-list *music-list* "Music/Artist:" nil t)))
      (when query
        (music query))))

  (define (get-playlist)
    "Get active playlist"
    (let ((output (make-string-output-stream)))
      (cond
       ((= *music-player* 'musicd)
        (call-process (make-process output) nil "sh" "-c"
                      (concat "cat " (user-home-directory) "/.musicd/playlist"
                              " | awk -F/ '{print $NF}'"))))
      (remove-duplicates
       (string-split "\012" (string-downcase
                             (get-output-stream-string output))))))

  (define (prompt-for-song)
    "Prompt for a song to jump to in the active player"
    (let* ((playlist (get-playlist))
           (query (prompt-from-list playlist "Music/Song:" nil t)))
      (when query
        (cond
         ((= *music-player* 'musicd)
          (system (format nil "%s/Documents/bin/songplay %S" (user-home-directory) (1+ (find-in-list query playlist)))))))))

  (bind-keys
   global-keymap

   "Super-Ret"   '(prompt-for-music)
   "Super-S-Ret" '(prompt-for-song)
   "Super-M-Ret" '(music (prompt-for-file "Music/File:" #:start "/media/media/"))
   )

  (setq root-menu (append `((,(_ "_Music") . ((,(_ "Play _Artist") (prompt-for-music))
                                              (,(_ "Play _Song") (prompt-for-song))
                                              (,(_ "Play _File") (music (prompt-for-file "Music/File:" #:start "/media/media/")))
                                              (,(_ "_Edit Playlist") (system (format nil "%s/Documents/bin/editplaylist.sh &" (user-home-directory))))))
                            ())
                          root-menu)))


;; Festival
(when (member 'festival *use-features*)
  (require 'festival)
  (festival-open)

  (define (festival-say-with-voice text voice)
    "Say text using a specific voice"
    (festival-eval voice)
    (festival-say text)
    (festival-eval '(voice_nitech_us_slt_arctic_hts)))

  (festival-say-workspace-on-change t)

  (bind-keys
   global-keymap

   "Super-Button1-Click" '(festival-say-with-voice (x-get-selection 'PRIMARY) '(voice_nitech_us_rms_arctic_hts))
   "Super-Button3-Click" '(festival-say-with-voice (x-get-selection 'PRIMARY) '(voice_nitech_us_slt_arctic_hts))
   ))


;; Mouse Gestures
(when (member 'mouse-gestures *use-features*)
  (require 'grow-pack)

  (setq *gestures-initial-xy* '(0 . 0))

  (define (start-gesture)
    "Initialize gestures, must be called on mouse-down, before perform-gesture"
    (setq *gestures-initial-xy* (query-pointer)))

  (define (perform-gesture #!key threshold up down left right)
    "Perform a mouse-based gesture"
    (let* ((threshold (or threshold 60))
           (initial-x (car *gestures-initial-xy*))
           (initial-y (cdr *gestures-initial-xy*))
           (new-xy (query-pointer))
           (new-x (car new-xy))
           (new-y (cdr new-xy)))
      (cond
       ((> (- initial-y threshold) new-y)
        (eval (or up    '(grow-window-up (input-focus)))))
       ((> (- initial-x threshold) new-x)
        (eval (or left  '(grow-window-left (input-focus)))))
       ((< (+ initial-y threshold) new-y)
        (eval (or down  '(grow-window-down (input-focus)))))
       ((< (+ initial-x threshold) new-x)
        (eval (or right '(grow-window-right (input-focus))))))))

  (bind-keys
   global-keymap

   "Super-Button2-Click" '(start-gesture)
   "Super-Button2-Off"   '(perform-gesture)
   ))


;; Xmobar
(when (member 'xmobar *use-features*)
  (require 'xmobar)
  (activate-xmobar
   (concat (user-home-directory) "/.sawfish/xmobar")))

;; Alternate themes for certain apps
(when (member 'alt-theme *use-features*)
  (mapc #'(lambda (name)
            (add-window-matcher 'WM_CLASS (symbol-name name) (cons 'frame-style (intern *alt-theme-frame*))))
        *alt-theme-apps*)
  (let ((old-system system))
    (define (system command)
      (old-system (if (member-if #'(lambda (el)
                                     (string-head-eq (string-downcase command)
                                                     (string-downcase (symbol-name el))))
                                 *alt-theme-apps*)
                      (format nil "GTK2_RC_FILES=%S/.themes/%S/gtk-2.0/gtkrc:%S %s" (user-home-directory) *alt-theme-gtk* *alt-theme-gtk-extra* command)
                    command)))))
