;; -*- mode: Sawfish -*-

;; Require stuff

(require 'sawfish.wm.commands.jump-or-exec)
(require 'sawfish.wm.util.selection)
(require 'sawfish.wm.util.window-order)
(require 'prompt)
(require 'prompt-menu)
(require 'emacs)
(require 'grow-pack)
(require 'undo)
(require 'focus-by-direction)
(require 'native-focus-transparency)

;; Settings

(setq help-display-info-function emacs-call-info)
(setq *out-of-focus-trans* 0xE0000000)

;; Keymaps

(defvar irc-keymap (make-keymap) "Keymap for IRC")

(bind-keys irc-keymap
           "M-i"   '(jump-or-exec-or-last "screen -x" "urxvt -e ssh 10.1.1.9 screen -x")
           "M-p"     '(irc (x-get-selection 'PRIMARY))
           "M-s"     '(irc (prompt #:title "IRC:"))
)

(do ((i 1 (1+ i)))
    ((< 9 i) i)
  (bind-keys irc-keymap
             (concat "M-" (number->string i))
             `(synthesize-event (concat "M-" (number->string ,i)) (get-window-by-name-re "screen -x"))))

(bind-keys global-keymap
           "M-tab"   '(display-window (prompt-for-window))

           "M-c"     'delete-window
           "M-b"     '(prompt-menu (emacs-buffers-menu) "Emacs Buffer:")
           "M-f"     '(emacs-edit (prompt-for-file "Emacs Edit:"))
           "M-o"     '(system (format nil "gnome-open %s &" (prompt-for-file "Open:")))
           "M-r"     '(rename-workspace current-workspace (prompt #:title "Workspace Name:"))

           "M-w"     '(jump-or-exec-or-last "Vimperator" "firefox")
           "M-e"     '(jump-or-exec-or-last "Urgent Tasks" "emacs")
           "M-i"     irc-keymap

           "Super-Ret" '(prompt-for-music)

           "M-Ret"   '(system (concat (prompt #:title "Run:") " &"))
           "M-`"     '(call-command (prompt-for-command "Sawfish Command:"))

           "M-u"     'undo

           "M-Left"  'focus-west
           "M-Right" 'focus-east
           "M-Up"    'focus-north
           "M-Down"  'focus-south

           "M-n"     '(system "firefox &")
           "M-m"     '(emacs-run "(make-frame)")

           "M-Space" '(system "urxvt &")

           "M--"     'shrink-window-all
           "M-="     'grow-window-all

           "Super-Button4-Click" 'next-workspace
           "Super-Button5-Click" 'previous-workspace

           "Super-Button1-Click" '(festival-say-with-voice (x-get-selection 'PRIMARY) '(voice_nitech_us_rms_arctic_hts))
           "Super-Button3-Click" '(festival-say-with-voice (x-get-selection 'PRIMARY) '(voice_nitech_us_slt_arctic_hts))
)

(do ((i 1 (1+ i)))
    ((< (length workspace-names) i) i)
  (bind-keys global-keymap
             (concat "Super-" (number->string i))
             `(activate-workspace ,i)))

(bind-keys root-window-keymap
           "Button2-Click" '(system "urxvt &")
           "Button3-Click" 'popup-root-menu
           "Button4-Click" 'next-workspace
           "Button5-Click" 'previous-workspace)

(bind-keys window-keymap
           "M-Button3-Move" 'resize-window-interactively)

;; Custom functions

(define (current-window)
  "Returns the current window"
  (input-focus))

(define (jump-or-exec-or-last re exec)
  "Jump-or-exec, unless the window is already focused, in which case focus last window"
  (if (string-match re (window-name (current-window)))
      (display-window (nth 1 (window-order)))
    (jump-or-exec re exec)))

(define (resize-current-window w h)
  "Resize the current window"
  (resize-window-with-hints* (current-window) w h))

(define (grow-window-all w #!optional arg)
  (grow-window-up w arg)
  (grow-window-right w arg)
  (grow-window-down w arg)
  (grow-window-left w arg))

(define-command 'grow-window-all grow-window-all #:spec "%W\nP")

(define (rename-workspace n name)
  "Rename the Nth workspace to NAME"
  (setq workspace-names
        (let ((i -1))
          (mapcar #'(lambda (item)
                      (if (= n (setq i (1+ i)))
                          name
                        item)) workspace-names))))

(define (send-string-to-window s w)
  (let ((i 0))
    (while (< i (length s))
           (let* ((ch (substring s i (setq i (1+ i))))
                  (e (cond ((equal ch "\n") "RET")
                           (t ch))))
             (synthesize-event e w)))))

(define (irc s)
  (send-string-to-window (concat s "\n") (get-window-by-name-re "screen -x")))

;; Hooks

(define (my-enter-workspace-hook)
  (emacs-eval (format nil "(my-clock-in-on-workspace-change %S)" (nth current-workspace workspace-names))))

(add-hook 'enter-workspace-hook my-enter-workspace-hook)

;; Music control

(setq *music-list*
      (let ((output (make-string-output-stream)))
        (call-process (make-process output) nil "sqlite3" "/home/hashbox/.config/xmms2/medialib.db"
                      "SELECT DISTINCT value FROM Media WHERE key = \"artist\";")
        (string-split "\012" (get-output-stream-string output))))

(define (music query)
  "Select artist or query for playing in XMMS2"
  (if (string-match "[:~]" query)
      (system (format nil "nyxmms2 scap %s &" query))
    (system (format nil "nyxmms2 scap artist:'%s' &" query))))

(define (prompt-for-music)
  (let ((query (prompt-from-list *music-list* "Music:" nil t)))
    (when query
      (music query))))

;; Festival

(require 'festival)
(festival-open)

(define (festival-say-with-voice text voice)
  (festival-eval voice)
  (festival-say text)
  (festival-eval '(voice_nitech_us_slt_arctic_hts)))

(festival-say-workspace-on-change t)
